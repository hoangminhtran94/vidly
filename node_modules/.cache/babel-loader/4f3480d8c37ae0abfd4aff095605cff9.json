{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thinkpad E15\\\\Desktop\\\\Demo\\\\vidly\\\\src\\\\components\\\\movieForm.jsx\";\nimport React, { Component } from \"react\";\nimport Form from \"./common/form\";\nimport { getGenres } from \"../services/genreService\";\nimport { getMovie, saveMovie } from \"../services/movieService\";\nimport Joi from \"joi-browser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MovieForm extends Form {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      data: {\n        title: \"\",\n        genreId: \"\",\n        numberInStock: 0,\n        dailyRentalRate: 0\n      },\n      genres: [],\n      errors: {}\n    };\n    this.schema = {\n      _id: Joi.string(),\n      title: Joi.string().required().label(\"Title\"),\n      genreId: Joi.string().required().label(\"Genre\"),\n      numberInStock: Joi.number().required().min(0).max(100).label(\"Number in Stock\"),\n      dailyRentalRate: Joi.number().required().min(0).max(10).label(\"Daily Rental Rate\")\n    };\n\n    this.doSubmit = async () => {\n      await saveMovie(this.state.data);\n      this.props.history.push(\"/movies\");\n    };\n  }\n\n  async populateGenres() {\n    const {\n      data: genres\n    } = await getGenres();\n    this.setState({\n      genres\n    });\n  }\n\n  async populateMovie() {\n    try {\n      const movieId = this.props.match.params.id;\n      if (movieId === \"new\") return;\n      const {\n        data: movie\n      } = await getMovie(movieId);\n      this.setState({\n        data: this.mapToViewModel(movie)\n      });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 404) return this.props.history.replace(\"/not-found\");\n    }\n  }\n\n  async componentDidMount() {\n    await this.populateGenres();\n    await this.populateMovie();\n  }\n\n  mapToViewModel(movie) {\n    return {\n      _id: movie._id,\n      title: movie.title,\n      genreId: movie.genre._id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate\n    };\n  }\n\n  render() {\n    const {\n      id\n    } = this.props.match.params;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: id === \"new\" ? \"New movie\" : \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [this.renderInput(\"title\", \"Title\"), this.renderSelect(\"genreId\", \"Genre\", this.state.genres), this.renderInput(\"numberInStock\", \"Number in Stock\", \"number\"), this.renderInput(\"dailyRentalRate\", \"Rate\", \"number\"), this.renderButton(\"Save\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["C:/Users/Thinkpad E15/Desktop/Demo/vidly/src/components/movieForm.jsx"],"names":["React","Component","Form","getGenres","getMovie","saveMovie","Joi","MovieForm","state","data","title","genreId","numberInStock","dailyRentalRate","genres","errors","schema","_id","string","required","label","number","min","max","doSubmit","props","history","push","populateGenres","setState","populateMovie","movieId","match","params","id","movie","mapToViewModel","ex","response","status","replace","componentDidMount","genre","render","handleSubmit","renderInput","renderSelect","renderButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from \"./common/form\";\r\nimport { getGenres } from \"../services/genreService\";\r\nimport { getMovie, saveMovie } from \"../services/movieService\";\r\nimport Joi from \"joi-browser\";\r\n\r\nclass MovieForm extends Form {\r\n  state = {\r\n    data: { title: \"\", genreId: \"\", numberInStock: 0, dailyRentalRate: 0 },\r\n    genres: [],\r\n    errors: {},\r\n  };\r\n  schema = {\r\n    _id: Joi.string(),\r\n    title: Joi.string().required().label(\"Title\"),\r\n    genreId: Joi.string().required().label(\"Genre\"),\r\n    numberInStock: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(100)\r\n      .label(\"Number in Stock\"),\r\n    dailyRentalRate: Joi.number()\r\n      .required()\r\n      .min(0)\r\n      .max(10)\r\n      .label(\"Daily Rental Rate\"),\r\n  };\r\n\r\n  async populateGenres() {\r\n    const { data: genres } = await getGenres();\r\n    this.setState({ genres });\r\n  }\r\n  async populateMovie() {\r\n    try {\r\n      const movieId = this.props.match.params.id;\r\n      if (movieId === \"new\") return;\r\n      const { data: movie } = await getMovie(movieId);\r\n      this.setState({ data: this.mapToViewModel(movie) });\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404)\r\n        return this.props.history.replace(\"/not-found\");\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.populateGenres();\r\n    await this.populateMovie();\r\n  }\r\n  mapToViewModel(movie) {\r\n    return {\r\n      _id: movie._id,\r\n      title: movie.title,\r\n      genreId: movie.genre._id,\r\n      numberInStock: movie.numberInStock,\r\n      dailyRentalRate: movie.dailyRentalRate,\r\n    };\r\n  }\r\n  doSubmit = async () => {\r\n    await saveMovie(this.state.data);\r\n    this.props.history.push(\"/movies\");\r\n  };\r\n  render() {\r\n    const { id } = this.props.match.params;\r\n    return (\r\n      <div>\r\n        <h1>{id === \"new\" ? \"New movie\" : \"Edit\"}</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"title\", \"Title\")}\r\n          {this.renderSelect(\"genreId\", \"Genre\", this.state.genres)}\r\n          {this.renderInput(\"numberInStock\", \"Number in Stock\", \"number\")}\r\n          {this.renderInput(\"dailyRentalRate\", \"Rate\", \"number\")}\r\n          {this.renderButton(\"Save\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieForm;\r\n"]},"metadata":{},"sourceType":"module"}