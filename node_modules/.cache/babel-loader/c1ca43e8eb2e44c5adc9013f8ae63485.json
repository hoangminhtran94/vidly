{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thinkpad E15\\\\Desktop\\\\Demo\\\\vidly\\\\src\\\\components\\\\movies.jsx\";\nimport React, { Component, useState } from \"react\";\nimport { getMovies } from \"../services/fakeMovieService\";\nimport Pagnition from \"./common/pagnition\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listgroup\";\nimport { getGenres } from \"../services/genreService\";\nimport MoviesTable from \"./moviesTable\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\nimport SearchBox from \"./common/searchBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Movie extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      movies: [],\n      pageSize: 4,\n      currentPage: 1,\n      genres: [],\n      currentGenre: {},\n      searchQuery: \"\",\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.newMovies = newmovie => {\n      const newMovies = {};\n      const movies = [...this.state.movies];\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies: movies\n      });\n    };\n\n    this.handleClick = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie); // movies[index] = { ...movie };\n\n      movies[index].isClick = !movies[index].isClick;\n      this.setState({\n        movies: movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreChange = genre => {\n      this.setState({\n        currentGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn: sortColumn\n      });\n    };\n\n    this.getPageData = () => {\n      const {\n        pageSize,\n        currentPage,\n        movies,\n        currentGenre,\n        sortColumn,\n        searchQuery\n      } = this.state;\n      let filtered = movies;\n\n      if (searchQuery) {\n        filtered = movies.filter(m => m.title.toLowerCase().match(searchQuery.toLowerCase()));\n      } else if (currentGenre && currentGenre._id) {\n        filtered = movies.filter(m => m.genre._id === currentGenre._id);\n      }\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movie = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movie\n      };\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const result = await getGenres();\n    console.log(result);\n    const genres = [{\n      _id: \"\",\n      name: \"All Genre\"\n    }, ...data];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      genre,\n      currentGenre,\n      sortColumn\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There is not any movie in database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }, this);\n    const {\n      totalCount,\n      data: movie\n    } = this.getPageData();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\",\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          genreCount: genre.length,\n          genre: genre,\n          currentGenre: currentGenre,\n          onGenreChange: this.handleGenreChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-primary\",\n          to: \"/movies/new\",\n          children: \"New movie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of movies: \", totalCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n          value: this.state.searchQuery,\n          onChange: this.handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MoviesTable, {\n          movie: movie,\n          onHandleClick: this.handleClick,\n          onHandleDelete: this.handleDelete,\n          onSort: this.handleSort,\n          sortColumn: sortColumn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), totalCount > pageSize ? /*#__PURE__*/_jsxDEV(Pagnition, {\n          itemCount: totalCount,\n          pageSize: pageSize,\n          onPageChange: this.handlePageChange,\n          currentPage: currentPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:/Users/Thinkpad E15/Desktop/Demo/vidly/src/components/movies.jsx"],"names":["React","Component","useState","getMovies","Pagnition","paginate","ListGroup","getGenres","MoviesTable","_","Link","SearchBox","Movie","state","movies","pageSize","currentPage","genres","currentGenre","searchQuery","sortColumn","path","order","newMovies","newmovie","handleDelete","movie","filter","m","_id","setState","handleClick","index","indexOf","isClick","handlePageChange","page","handleGenreChange","genre","handleSort","getPageData","filtered","title","toLowerCase","match","sorted","orderBy","totalCount","length","data","handleSearch","query","selectedGenre","componentDidMount","result","console","log","name","render","count"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport { getMovies } from \"../services/fakeMovieService\";\r\nimport Pagnition from \"./common/pagnition\";\r\nimport { paginate } from \"../utils/paginate\";\r\nimport ListGroup from \"./common/listgroup\";\r\nimport { getGenres } from \"../services/genreService\";\r\nimport MoviesTable from \"./moviesTable\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchBox from \"./common/searchBox\";\r\n\r\nclass Movie extends Component {\r\n  state = {\r\n    movies: [],\r\n    pageSize: 4,\r\n    currentPage: 1,\r\n    genres: [],\r\n    currentGenre: {},\r\n    searchQuery: \"\",\r\n    sortColumn: { path: \"title\", order: \"asc\" },\r\n  };\r\n\r\n  newMovies = (newmovie) => {\r\n    const newMovies = {};\r\n    const movies = [...this.state.movies];\r\n  };\r\n  async componentDidMount() {\r\n    const result = await getGenres();\r\n    console.log(result);\r\n    const genres = [{ _id: \"\", name: \"All Genre\" }, ...data];\r\n    this.setState({ movies: getMovies(), genres });\r\n  }\r\n  handleDelete = (movie) => {\r\n    const movies = this.state.movies.filter((m) => m._id !== movie._id);\r\n    this.setState({ movies: movies });\r\n  };\r\n  handleClick = (movie) => {\r\n    const movies = [...this.state.movies];\r\n    const index = movies.indexOf(movie);\r\n    // movies[index] = { ...movie };\r\n    movies[index].isClick = !movies[index].isClick;\r\n    this.setState({ movies: movies });\r\n  };\r\n\r\n  handlePageChange = (page) => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  handleGenreChange = (genre) => {\r\n    this.setState({ currentGenre: genre, searchQuery: \"\", currentPage: 1 });\r\n  };\r\n\r\n  handleSort = (sortColumn) => {\r\n    this.setState({ sortColumn: sortColumn });\r\n  };\r\n  getPageData = () => {\r\n    const {\r\n      pageSize,\r\n      currentPage,\r\n      movies,\r\n      currentGenre,\r\n      sortColumn,\r\n      searchQuery,\r\n    } = this.state;\r\n    let filtered = movies;\r\n    if (searchQuery) {\r\n      filtered = movies.filter((m) =>\r\n        m.title.toLowerCase().match(searchQuery.toLowerCase())\r\n      );\r\n    } else if (currentGenre && currentGenre._id) {\r\n      filtered = movies.filter((m) => m.genre._id === currentGenre._id);\r\n    }\r\n\r\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\r\n    const movie = paginate(sorted, currentPage, pageSize);\r\n    return { totalCount: filtered.length, data: movie };\r\n  };\r\n\r\n  handleSearch = (query) => {\r\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\r\n  };\r\n  render() {\r\n    const { length: count } = this.state.movies;\r\n    const { pageSize, currentPage, genre, currentGenre, sortColumn } =\r\n      this.state;\r\n\r\n    if (count === 0) return <p>There is not any movie in database</p>;\r\n\r\n    const { totalCount, data: movie } = this.getPageData();\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-3\">\r\n          <ListGroup\r\n            genreCount={genre.length}\r\n            genre={genre}\r\n            currentGenre={currentGenre}\r\n            onGenreChange={this.handleGenreChange}\r\n          />\r\n        </div>\r\n        <div className=\"col\">\r\n          <Link className=\"btn btn-primary\" to=\"/movies/new\">\r\n            New movie\r\n          </Link>\r\n          <p>Number of movies: {totalCount}</p>\r\n          <SearchBox\r\n            value={this.state.searchQuery}\r\n            onChange={this.handleSearch}\r\n          />\r\n          <MoviesTable\r\n            movie={movie}\r\n            onHandleClick={this.handleClick}\r\n            onHandleDelete={this.handleDelete}\r\n            onSort={this.handleSort}\r\n            sortColumn={sortColumn}\r\n          />\r\n\r\n          {totalCount > pageSize ? (\r\n            <Pagnition\r\n              itemCount={totalCount}\r\n              pageSize={pageSize}\r\n              onPageChange={this.handlePageChange}\r\n              currentPage={currentPage}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n"]},"metadata":{},"sourceType":"module"}